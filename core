#include "stm32l1xx.h"
#include "stm32l1xx_ll_system.h"
#include "stm32l1xx_ll_bus.h"
#include "stm32l1xx_ll_utils.h"
#include "stm32l1xx_ll_rcc.h"
#include "stm32l1xx_ll_pwr.h"
#include "stm32l1xx_ll_gpio.h"
#include "stm32l1xx_ll_usart.h"
#include "stm32l1xx_ll_tim.h"
#include "stm32l1xx_ll_exti.h"

#define TIMx_PSC 3200
#define TIMx_ARR 100
#define E_O6 (uint16_t)1318
#define ARR_CALCULATE(N) (SystemCoreClock) / ((TIMx_PSC) * (N))


void SystemClock_Config(void);
/*********************** ir, motors config fnc ***********************/
void GPIO_Config(void);
void TIM_BASE_Config(uint16_t);
void TIM_OC_GPIO_Config(void);
void TIM_OC_Config(uint16_t);
/*********************** sonar config fnc ***********************/
void UtrSnc_GPIO_Config(void);
void TIMx_IC_Config(void);
/*********************** Speaker config fnc ***********************/
void TIM_OC_Speaker_config(uint16_t);

float period, distance;
uint16_t uwIC1 = 0;
uint16_t uwIC2 = 0;
uint16_t uwDiff = 0;
uint16_t uhICIndex = 0;

uint32_t TIM2CLK;
uint32_t PSC;
uint32_t IC1PSC;

int main()
{
	SystemClock_Config();
	UtrSnc_GPIO_Config();
	TIMx_IC_Config();
	GPIO_Config();
	TIM_OC_Config(E_O6);
	
	int cnt1 = 0;

	int LftIR = LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_10);
	int RghtIR = LL_GPIO_IsInputPinSet(GPIOB,LL_GPIO_PIN_11);
	
	LL_GPIO_SetOutputPin(GPIOB,LL_GPIO_PIN_6);
	LL_GPIO_SetOutputPin(GPIOB,LL_GPIO_PIN_7);
	
	while(1){
		//**************** sonar activates ****************
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
		LL_mDelay(1);
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
		if(uhICIndex==2){
			PSC = LL_TIM_GetPrescaler(TIM2)+1;
			TIM2CLK = SystemCoreClock / PSC;
			IC1PSC = __LL_TIM_GET_ICPSC_RATIO(LL_TIM_IC_GetPrescaler(TIM2, LL_TIM_CHANNEL_CH1));
			period = (uwDiff*(PSC)*1.0)/(TIM2CLK*IC1PSC*1.0);
			distance = (period*170)*100;
			uhICIndex = 0;
		}
		
		if(distance<=10){ // sonar found		
			LL_TIM_OC_SetCompareCH1(TIM3,0);
			LL_TIM_OC_SetCompareCH2(TIM3,0);
			while(distance<=10){
				LL_TIM_OC_SetCompareCH1(TIM3,30);
				LL_TIM_OC_SetCompareCH2(TIM3,50);
			}
			if(distance!=10){
				LL_TIM_OC_SetCompareCH1(TIM3,50);
				LL_TIM_OC_SetCompareCH2(TIM3,25);
				LL_mDelay(1500);
				LL_TIM_OC_SetCompareCH1(TIM3,50);
				LL_TIM_OC_SetCompareCH2(TIM3,50);
				if(LftIR==1 || RghtIR==1){
					goto moving;
				}
			}
		}
		moving :
		if(LftIR==1 && RghtIR==1){
			LL_TIM_OC_SetCompareCH1(TIM3,50);
			LL_TIM_OC_SetCompareCH2(TIM3,50);
		}
		else if(LftIR==1&&RghtIR==0){
			LL_TIM_OC_SetCompareCH1(TIM3,25);
			LL_TIM_OC_SetCompareCH2(TIM3,50);
		}
		else if(LftIR==0&&RghtIR==1){
			LL_TIM_OC_SetCompareCH1(TIM3,50);
			LL_TIM_OC_SetCompareCH2(TIM3,25);
		}
	}
}

void UtrSnc_GPIO_Config(void){
	LL_GPIO_InitTypeDef gpio_init;	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
	
	gpio_init.Mode = LL_GPIO_MODE_ALTERNATE;
	gpio_init.Pull = LL_GPIO_PULL_NO;
	gpio_init.Pin = LL_GPIO_PIN_0;
	gpio_init.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	gpio_init.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	gpio_init.Alternate = LL_GPIO_AF_1;
	
	LL_GPIO_Init(GPIOA, &gpio_init);
}

void TIMx_IC_Config(void){
	LL_TIM_IC_InitTypeDef tim_ic_init;
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
	
	tim_ic_init.ICActiveInput = LL_TIM_ACTIVEINPUT_DIRECTTI;
	tim_ic_init.ICFilter = LL_TIM_IC_FILTER_FDIV1_N2;
	tim_ic_init.ICPolarity = LL_TIM_IC_POLARITY_BOTHEDGE;
	tim_ic_init.ICPrescaler = LL_TIM_ICPSC_DIV1;
	LL_TIM_IC_Init(TIM2, LL_TIM_CHANNEL_CH1, &tim_ic_init);
	
	NVIC_SetPriority(TIM2_IRQn,0);
	NVIC_EnableIRQ(TIM2_IRQn);
	
	LL_TIM_EnableIT_CC1(TIM2);
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
	LL_TIM_EnableCounter(TIM2);
}

void TIM2_IRQHandler(void){
	if(LL_TIM_IsActiveFlag_CC1(TIM2)==SET){
		LL_TIM_ClearFlag_CC1(TIM2);
		if(uhICIndex==0){
			uwIC1 = LL_TIM_IC_GetCaptureCH1(TIM2);
			uhICIndex = 1;
		}
		else if(uhICIndex==1){
			uwIC2 = LL_TIM_IC_GetCaptureCH1(TIM2);
			if(uwIC2>uwIC1){
				uwDiff = uwIC2-uwIC1;
			}
			else if(uwIC2<uwIC1){
				uwDiff = ((LL_TIM_GetAutoReload(TIM2)-uwIC1)+uwIC2)+1;
			}
			uhICIndex = 2;
		}
	}
}
/***************************** Handler for speaker ***********************************/
void EXTI15_10_IRQHandler(void) {
    if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13)) {
        if(distance<10){
					TIM_OC_Speaker_config(ARR_CALCULATE(E_O6));
				}
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
    }
}
/***************************** Set all of pin ***********************************/
void GPIO_Config(void){
	LL_GPIO_InitTypeDef gpio_init;
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
	
	gpio_init.Mode = LL_GPIO_MODE_INPUT;
	gpio_init.Pin = LL_GPIO_PIN_10 | LL_GPIO_PIN_11; // LeftIR, RightIR 
	gpio_init.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	gpio_init.Pull = LL_GPIO_PULL_NO;
	gpio_init.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	LL_GPIO_Init(GPIOB, &gpio_init);
	
	gpio_init.Mode = LL_GPIO_MODE_OUTPUT;
	gpio_init.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7; // Left, Right Motors
	LL_GPIO_Init(GPIOB, &gpio_init);
	
	gpio_init.Mode = LL_GPIO_MODE_OUTPUT;
	gpio_init.Pin = LL_GPIO_PIN_13;
	LL_GPIO_Init(GPIOB, &gpio_init); // Speaker
	
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG); // Set EXTI for speaker
	LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE13);
	LL_EXTI_EnableRisingTrig_0_31(LL_EXTI_LINE_13);
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_13);
}
/***************************** TIM BASE for Sonar ***********************************/
void TIM_BASE_Config(uint16_t ARR) {
    LL_TIM_InitTypeDef timbase_initstructure;
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
		LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM9);

    // Time-base configure
    timbase_initstructure.ClockDivision = LL_TIM_CLOCKDIVISION_DIV2;
    timbase_initstructure.CounterMode = LL_TIM_COUNTERMODE_UP;
    timbase_initstructure.Autoreload = 100 - 1;
    timbase_initstructure.Prescaler = 32000 - 1;
    LL_TIM_Init(TIM3, &timbase_initstructure);
    LL_TIM_EnableCounter(TIM3);
		// note
		timbase_initstructure.Autoreload = ARR - 1;
    timbase_initstructure.Prescaler = 32000 - 1;
		LL_TIM_Init(TIM9, &timbase_initstructure);
    LL_TIM_EnableCounter(TIM9);
}
/***************************** OC GPIO Config dor Motors and Speaker ***********************************/
void TIM_OC_GPIO_Config(void){
	LL_GPIO_InitTypeDef gpio_init;
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
	
	gpio_init.Mode = LL_GPIO_MODE_ALTERNATE;
	gpio_init.Alternate = LL_GPIO_AF_2;
	gpio_init.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	gpio_init.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7; // Motors
	gpio_init.Pull = LL_GPIO_PULL_NO;
	gpio_init.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	LL_GPIO_Init(GPIOB, &gpio_init);
	
	gpio_init.Alternate = LL_GPIO_AF_3;
	gpio_init.Pin = LL_GPIO_PIN_13; // speaker
	LL_GPIO_Init(GPIOB, &gpio_init);
}
/***************************** OC Config for Motors ***********************************/
void TIM_OC_Config(uint16_t note){
	TIM_BASE_Config(note);
	TIM_OC_GPIO_Config();
	
	LL_TIM_OC_InitTypeDef tim_oc_init;
	
	tim_oc_init.OCState = LL_TIM_OCSTATE_DISABLE;
	tim_oc_init.OCMode = LL_TIM_OCMODE_PWM1;
	tim_oc_init.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
	tim_oc_init.CompareValue = 100; // CCR
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &tim_oc_init);
	
	tim_oc_init.CompareValue = 100; // CCR
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &tim_oc_init);
	
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
	LL_TIM_EnableCounter(TIM3);
}
/***************************** OC Config for Speaker ***********************************/
void TIM_OC_Speaker_config(uint16_t note){
	TIM_BASE_Config(note);
	TIM_OC_GPIO_Config();
	
	LL_TIM_OC_InitTypeDef tim_oc_init;
	
	tim_oc_init.OCState = LL_TIM_OCSTATE_DISABLE;
	tim_oc_init.OCMode = LL_TIM_OCMODE_PWM1;
	tim_oc_init.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
	tim_oc_init.CompareValue = 75;
	LL_TIM_OC_Init(TIM9,LL_TIM_CHANNEL_CH1,&tim_oc_init);
	
	LL_TIM_CC_EnableChannel(TIM9, LL_TIM_CHANNEL_CH1);
	LL_TIM_EnableCounter(TIM9);
	
	NVIC_SetPriority(EXTI15_10_IRQn,0);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
	LL_TIM_EnableIT_CC1(TIM9);
}

void SystemClock_Config(void)
{
  /* Enable ACC64 access and set FLASH latency */ 
  LL_FLASH_Enable64bitAccess();; 
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);

  /* Set Voltage scale1 as MCU will run at 32MHz */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (LL_PWR_IsActiveFlag_VOSF() != 0)
  {
  };
  
  /* Enable HSI if not already activated*/
  if (LL_RCC_HSI_IsReady() == 0)
  {
    /* HSI configuration and activation */
    LL_RCC_HSI_Enable();
    while(LL_RCC_HSI_IsReady() != 1)
    {
    };
  }
  
  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3);

  LL_RCC_PLL_Enable();
  while(LL_RCC_PLL_IsReady() != 1)
  {
  };
  
  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
  };
  
  /* Set APB1 & APB2 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

  /* Set systick to 1ms in using frequency set to 32MHz                             */
  /* This frequency can be calculated through LL RCC macro                          */
  /* ex: __LL_RCC_CALC_PLLCLK_FREQ (HSI_VALUE, LL_RCC_PLL_MUL_6, LL_RCC_PLL_DIV_3); */
  LL_Init1msTick(32000000);
  
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(32000000);
}


